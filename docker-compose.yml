version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: loan-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-adminpassword}
      MONGO_INITDB_DATABASE: loan_management
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - loan-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: loan-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - loan-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: loan-app
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-5000}
      HOST: 0.0.0.0
      
      # Database
      MONGODB_URI: mongodb://admin:${MONGO_ROOT_PASSWORD:-adminpassword}@mongodb:27017/loan_management?authSource=admin
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-session-key-change-this-in-production}
      
      # API Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,https://yourdomain.com}
      
      # External Services
      PLAID_CLIENT_ID: ${PLAID_CLIENT_ID}
      PLAID_SECRET: ${PLAID_SECRET}
      PLAID_ENVIRONMENT: ${PLAID_ENVIRONMENT:-sandbox}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      RAPIDAPI_KEY: ${RAPIDAPI_KEY}
      
      # Analytics
      ANALYTICS_ENABLED: ${ANALYTICS_ENABLED:-true}
      GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
    ports:
      - "${PORT:-5000}:5000"
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - app_exports:/app/exports
      - app_database:/app/database
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - loan-network
    healthcheck:
      test: ["CMD", "node", "backend/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: loan-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
      # SSL certificates (uncomment for HTTPS)
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - loan-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  app_exports:
    driver: local
  app_database:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

networks:
  loan-network:
    driver: bridge